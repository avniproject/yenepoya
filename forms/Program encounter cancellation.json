{
  "name" : "Program encounter cancellation",
  "uuid" : "27050df1-caf6-46b5-909c-c508f2b956bb",
  "formType" : "ProgramEncounterCancellation",
  "formElementGroups" : [ {
    "uuid" : "f3830eb6-b233-452b-a76d-f9bfadb1814a",
    "name" : "Details",
    "displayOrder" : 1.0,
    "display" : "Details",
    "formElements" : [ {
      "name" : "Dummy",
      "uuid" : "2e9d8a0a-23cd-47bd-9ea9-529abc72a0d7",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Dummy",
        "uuid" : "2aefc479-7123-4867-9ff8-a8e2f6b31b43"
      },
      "displayOrder" : 1.0,
      "type" : "SingleSelect",
      "mandatory" : false,
      "voided" : true
    }, {
      "name" : "Reason Of Cancellation",
      "uuid" : "ecbb6cc8-4309-49a1-b5aa-3d47d9743272",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Reason Of Cancellation",
        "uuid" : "5592def2-fe5e-4234-9253-ca5fd0322e26"
      },
      "displayOrder" : 2.0,
      "type" : "SingleSelect",
      "mandatory" : true
    }, {
      "name" : "Other Reason of Cancellation",
      "uuid" : "a44a742e-c255-4e25-8930-acd752c7f350",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Other Reason of Cancellation",
        "uuid" : "8263f129-5851-4f9d-a909-818dacacd862"
      },
      "displayOrder" : 3.0,
      "type" : "SingleSelect",
      "rule" : "'use strict';\n({params, imports}) => {\n  const programEncounter = params.entity;\n  const formElement = params.formElement;\n  const statusBuilder = new\n  imports.rulesConfig.FormElementStatusBuilder({programEncounter, formElement});\n  statusBuilder.show().when.valueInCancelEncounter('Reason Of Cancellation').containsAnswerConceptName(\"Other\");\n  return statusBuilder.build();\n};\n",
      "mandatory" : true
    } ]
  } ],
  "decisionRule" : "",
  "visitScheduleRule" : "\"use strict\";\n({params, imports}) => {\n    const programEncounter = params.entity;\n    const scheduleBuilder = new imports.rulesConfig.VisitScheduleBuilder({Encounter: programEncounter});\n    if (programEncounter.encounterType.name === 'ANC Followup') {\n        const lmp = programEncounter.programEnrolment.getObservationReadableValue('Last menstrual period');\n        const getNextVisit = () => {\n            switch (programEncounter.name) {\n                case 'ANC Followup 1' : {\n                    const earliestDate = imports.moment(lmp).add(14, 'weeks');\n                    return ({\n                        name: 'ANC Followup 2',\n                        earliestDate: earliestDate.toDate(),\n                        maxDate: earliestDate.add(8, 'days').toDate()\n                    });\n                }\n                case 'ANC Followup 2' : {\n                    const earliestDate = imports.moment(lmp).add(28, 'weeks');\n                    return ({\n                        name: 'ANC Followup 3', earliestDate: earliestDate.toDate(),\n                        maxDate: earliestDate.add(8, 'days').toDate()\n                    });\n                }\n                case 'ANC Followup 3' : {\n                    const earliestDate = imports.moment(lmp).add(36, 'weeks');\n                    return ({\n                        name: 'ANC Followup 4', earliestDate: earliestDate.toDate(),\n                        maxDate: earliestDate.add(8, 'days').toDate()\n                    });\n                }\n                case 'ANC Followup 4' :\n                    return null;\n            }\n        };\n        const nextVisit = getNextVisit();\n        nextVisit && scheduleBuilder\n            .add({...nextVisit, encounterType: \"ANC Followup\"});\n    } else if (programEncounter.name === 'PNC 1') {\n        const dateOfDelivery = programEncounter.programEnrolment.getObservationReadableValueInEntireEnrolment('Date of Pregnancy Outcome');\n        const earlistDate = imports.moment(dateOfDelivery).add(42, 'days');\n        scheduleBuilder\n            .add({\n                name: \"PNC 2\",\n                encounterType: \"Mother PNC\",\n                earliestDate: earlistDate.toDate(),\n                maxDate: earlistDate.add(8, 'days').toDate()\n            });\n    } else if (programEncounter.encounterType.name === 'Child Growth Followup') {\n        const dob = imports.moment(programEncounter.programEnrolment.individual.dateOfBirth);\n        const nextVisitInfo = {\n            'Child Growth Followup 1': {\n                name: 'Child Growth Followup 2',\n                earliestDate: dob.add(42, 'days').toDate(),\n                maxDate: dob.add(50, 'days').toDate()\n            },\n            'Child Growth Followup 2': {\n                name: 'Child Growth Followup 3',\n                earliestDate: dob.add(70, 'days').toDate(),\n                maxDate: dob.add(78, 'days').toDate()\n            },\n            'Child Growth Followup 3': {\n                name: 'Child Growth Followup 4',\n                earliestDate: dob.add(98, 'days').toDate(),\n                maxDate: dob.add(106, 'days').toDate()\n            },\n            'Child Growth Followup 4': {\n                name: 'Child Growth Followup 5',\n                earliestDate: dob.add(274, 'days').toDate(),\n                maxDate: dob.add(282, 'days').toDate()\n            },\n            'Child Growth Followup 5': {\n                name: 'Child Growth Followup 6',\n                earliestDate: dob.add(487, 'days').toDate(),\n                maxDate: dob.add(495, 'days').toDate()\n            },\n            'Child Growth Followup 6': {\n                name: 'Child Growth Followup 7',\n                earliestDate: dob.add(5, 'years').toDate(),\n                maxDate: dob.add(5, 'years').add(8, 'days').toDate()\n            }\n        };\n        const nextVisit = nextVisitInfo[programEncounter.name];\n        nextVisit && scheduleBuilder\n            .add({...nextVisit, encounterType: \"Child Growth Followup\"});\n    } else if (!_.includes(['Mother PNC', 'ANC Followup', 'Child Growth Followup'], programEncounter.encounterType.name)) {\n        const encDate = programEncounter.earliestVisitDateTime;\n        const earliestDate = imports.moment(encDate).add('6', 'months').toDate();\n        const maxDate = imports.moment(earliestDate).add('15', 'days').toDate();\n        scheduleBuilder.add({\n            name: programEncounter.name,\n            encounterType: programEncounter.encounterType.name,\n            earliestDate: earliestDate,\n            maxDate\n        });\n    }\n    return scheduleBuilder.getAllUnique(\"encounterType\");\n};",
  "validationRule" : "",
  "checklistsRule" : ""
}